[[indices-aliases]]
== 索引别名

在操作一个或者多个特定索引时 Elasticsearch 中的 API  需要使用索引名称参数。索引别名 API 可以为索引指定别名，所有的 API 都可以自动的转换这个别名为索引实际的名称。一个别名可以映射到一个或者多个索引上。当使用时，别名会自动的扩展到适配的所有索引上。别名还可以与过滤器关联，以便能搜索或者路由特定的值。别名不能与索引同名。

以下是如何为索引 `test1` 关联别名 `alias1` 的示例：


[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "add" : { "index" : "test1", "alias" : "alias1" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test1\nPUT test2\n/]

如何删除别名：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "remove" : { "index" : "test1", "alias" : "alias1" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

重命名别名可以简单的在一个 API 调用中完成，先 `remove` 再 `add` 。这是一个原子操作，不用担心别名会有瞬间断开与索引的关联。


[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "remove" : { "index" : "test1", "alias" : "alias1" } },
        { "add" : { "index" : "test2", "alias" : "alias1" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

为多个索引添加同一个别名只需要简单的多次 `add` ：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "add" : { "index" : "test1", "alias" : "alias1" } },
        { "add" : { "index" : "test2", "alias" : "alias1" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test1\nPUT test2\n/]

多索引关联别名也可以在一个动作中完成，通过使用 `indices` 数组语法即可：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "add" : { "indices" : ["test1", "test2"], "alias" : "alias1" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test1\nPUT test2\n/]

要在一个操作中指定多个别名，也有相应的 `aliases` 数组语法。

针对上述示例，可以用一个通配符模式将共享公共名称的多个索引关联到一个别名上。

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        { "add" : { "index" : "test*", "alias" : "all_test_indices" } }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test1\nPUT test2\n/]

这种情况下的别名是一个时间点别名，它只会分组当前所有匹配的索引。当有匹配此模式的新索引添加或者删除时，它不会自动更新。

这可能产生某个索引与关联多个索引的别名的错误匹配。

可以在一个操作中互换索引和别名：

[source,js]
--------------------------------------------------
PUT test     <1>
PUT test_2   <2>
POST /_aliases
{
    "actions" : [
        { "add":  { "index": "test_2", "alias": "test" } },
        { "remove_index": { "index": "test" } }  <3>
    ]
}
--------------------------------------------------
// CONSOLE
<1> 一个我们错误添加的索引
<2> 我们应该添加的索引
<3> `remove_index` 就像 <<indices-delete-index>>

[float]
[[filtered]]
=== 过滤的别名

带有过滤的别名提供了一种简单的方法来创建相同索引的不同 “视图”。可以使用查询表达式 定义过滤器，并使用此别名将其应用于所有搜索、计数、查询删除和其它类似操作。

要创建一个过滤的别名，首先我们需要确保映射中已经存在这样的字段：

[source,js]
--------------------------------------------------
PUT /test1
{
  "mappings": {
    "_doc": {
      "properties": {
        "user" : {
          "type": "keyword"
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE

现在我们能在字段 `user` 上创建一个带过滤器的别名：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        {
            "add" : {
                 "index" : "test1",
                 "alias" : "alias2",
                 "filter" : { "term" : { "user" : "kimchy" } }
            }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

[float]
[[aliases-routing]]
==== 路由

可以为别名关联一个路由值。此功能与带过滤的别名一起使用能避免不必要的分片操作。

下面的命令创建一个指向 `test` 索引的新别名 `alias1`。之后针对这个别名的所有操作都会自动修改为使用值 `1` 进行路由：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        {
            "add" : {
                 "index" : "test",
                 "alias" : "alias1",
                 "routing" : "1"
            }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test\n/]

也可以为查询和索引指定不同的路由值：

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        {
            "add" : {
                 "index" : "test",
                 "alias" : "alias2",
                 "search_routing" : "1,2",
                 "index_routing" : "2"
            }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test\n/]

如上例所示，搜索路由可以包含由逗号分隔的多个值，但是索引路由只能使用单值。

如果一个使用了路由别名的查询操作自身也带有路由参数，则取两者的交集作为最终的路由参数。例如以下命令将使用“2”作为路由值。

[source,js]
--------------------------------------------------
GET /alias2/_search?q=user:kimchy&routing=2,3
--------------------------------------------------
// CONSOLE
// TEST[continued]

[float]
[[aliases-write-index]]
==== 写入索引

可以将别名指向的索引作为写入索引。当这样指定时，如果别名关联了多个索引，则针对该别名的所有索引和更新请求将试图解析出一个索引来作为写入索引。一次写索引操作只能分配给别名关联的索引中的一个。如果未指定写入索引，且别名关联了多个索引，则不允许写入。

可以使用别名 API 和创建索引 API 指定某别名关联的索引为写入索引。

设置一个索引作为关联别名的写入索引也会影响 Rollover 期间操作别名的方式。 (参见 <<indices-rollover-index, Rollover With Write Index>>).

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        {
            "add" : {
                 "index" : "test",
                 "alias" : "alias1",
                 "is_write_index" : true
            }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test\n/]

在这个示例中，我们关联别名 `alias1` 到索引 `test` 和 `test2` 上，并将 `test` 作为写入索引。

[source,js]
--------------------------------------------------
PUT /alias1/_doc/1
{
    "foo": "bar"
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

新文档被索引到 `/alias1/_doc/1` 就如同索引到 `/test/_doc/1` 一样。

[source,js]
--------------------------------------------------
GET /test/_doc/1
--------------------------------------------------
// CONSOLE
// TEST[continued]

要切换别名的写入索引，可以利用用别名 API 来执行原子操作。切换不依赖于操作的顺序。

[source,js]
--------------------------------------------------
POST /_aliases
{
    "actions" : [
        {
            "add" : {
                 "index" : "test",
                 "alias" : "alias1",
                 "is_write_index" : true
            }
        }, {
            "add" : {
                 "index" : "test2",
                 "alias" : "alias1",
                 "is_write_index" : false
            }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test\nPUT test2\n/]

[IMPORTANT]
=====================================
如果别名没有显示的为索引设置 `is_write_index: true` 属性，并且只关联了一个索引，那么这个索引就是其写入索引。直到别名又添加了另外的关联索引。此时，因为没有指定写入索引，写入操作将被拒绝。

=====================================

[float]
[[alias-adding]]
=== 添加简单别名


一个别名也可以简单的通过端点来添加。

`PUT /{index}/_alias/{name}`


说明

[horizontal]
`index`::   别名引用的索引，可以是任何一个 `* | _all | glob pattern | name1, name2, …`
`name`::   别名的名称，这是必选项。
`routing`:: 可选项，与别名关联的路由。
`filter`::  可选项，与别名关联的过滤器。

你也可以使用复数形式 `_aliases`.

[float]
==== 范例:

添加基于时间的别名::
+
--
[source,js]
--------------------------------------------------
PUT /logs_201305/_alias/2013
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT logs_201305\n/]
--

添加用户别名::
+
--
首先创建索引并为字段 `user_id` 添加映射：

[source,js]
--------------------------------------------------
PUT /users
{
    "mappings" : {
        "_doc" : {
            "properties" : {
                "user_id" : {"type" : "integer"}
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

然后为特定用户添加别名：

[source,js]
--------------------------------------------------
PUT /users/_alias/user_12
{
    "routing" : "12",
    "filter" : {
        "term" : {
            "user_id" : 12
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[continued]

--

[float]
[[alias-index-creation]]
=== 索引创建期间的别名

也可以在 <<create-index-aliases,index creation>> 期间指定别名

[source,js]
--------------------------------------------------
PUT /logs_20162801
{
    "mappings" : {
        "_doc" : {
            "properties" : {
                "year" : {"type" : "integer"}
            }
        }
    },
    "aliases" : {
        "current_day" : {},
        "2016" : {
            "filter" : {
                "term" : {"year" : 2016 }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

[float]
[[deleting]]
=== 删除别名


对应的 rest 服务端点为： `/{index}/_alias/{name}`

说明

[horizontal]
`index`::  `* | _all | glob pattern | name1, name2, …`
`name`::  `* | _all | glob pattern | name1, name2, …`

或者你也可以使用复数 `_aliases`. 例如：

[source,js]
--------------------------------------------------
DELETE /logs_20162801/_alias/current_day
--------------------------------------------------
// CONSOLE
// TEST[continued]

[float]
[[alias-retrieving]]
=== 检索现有别名

获取索引别名 API 允许你按别名和索引名来过滤查找。这个 api 会重定向到主节点并获取请求的索引别名，如果可用，此 api 仅仅序列化找到的别名并返回。

可能的选项：
[horizontal]
`index`::
    别名关联的索引名称，支持通配符匹配，也可以指定逗号分隔的多个索引名称。还支持索引的别名。

`alias`::
    别名的名称，支持通配符和由逗号分隔的多个别名。

`ignore_unavailable`::
    如果指定的索引名称不存在怎么办？如果设置为 `true` 则忽略这些索引。

对应的 rest 服务端点为： `/{index}/_alias/{alias}`.

[float]
==== 范例：

获取索引 `logs_20162801` 的所有别名：

[source,js]
--------------------------------------------------
GET /logs_20162801/_alias/*
--------------------------------------------------
// CONSOLE
// TEST[continued]

响应：

[source,js]
--------------------------------------------------
{
 "logs_20162801" : {
   "aliases" : {
     "2016" : {
       "filter" : {
         "term" : {
           "year" : 2016
         }
       }
     }
   }
 }
}
--------------------------------------------------
// TESTRESPONSE

查找所有名称为 2016 的别名：

[source,js]
--------------------------------------------------
GET /_alias/2016
--------------------------------------------------
// CONSOLE
// TEST[continued]

响应：

[source,js]
--------------------------------------------------
{
  "logs_20162801" : {
    "aliases" : {
      "2016" : {
        "filter" : {
          "term" : {
            "year" : 2016
          }
        }
      }
    }
  }
}
--------------------------------------------------
// TESTRESPONSE

查找所有以 20 开头的别名

[source,js]
--------------------------------------------------
GET /_alias/20*
--------------------------------------------------
// CONSOLE
// TEST[continued]

响应：

[source,js]
--------------------------------------------------
{
  "logs_20162801" : {
    "aliases" : {
      "2016" : {
        "filter" : {
          "term" : {
            "year" : 2016
          }
        }
      }
    }
  }
}
--------------------------------------------------
// TESTRESPONSE

还有一个 HEAD 请求也可以用来检查索引别名是否存在。支持的参数同上。例如：

[source,js]
--------------------------------------------------
HEAD /_alias/2016
HEAD /_alias/20*
HEAD /logs_20162801/_alias/*
--------------------------------------------------
// CONSOLE
// TEST[continued]
