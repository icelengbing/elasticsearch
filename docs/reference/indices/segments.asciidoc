[[indices-segments]]
== 索引段

提供构建 Lucene 索引（分片级别）的底层段信息。例如索引和分片的详细状态信息、可能的优化信息、删除时数据的“消耗”，等。

可以通过指定索引名称来访问索引段信息：

[source,js]
--------------------------------------------------
GET /test/_segments
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test\n{"settings":{"number_of_shards":1, "number_of_replicas": 0}}\nPOST test\/test\?refresh\n{"test": "test"}\n/]
// TESTSETUP

也可以指定多个索引：

[source,js]
--------------------------------------------------
GET /test1,test2/_segments
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT test1\nPUT test2\n/]

或者针对所有的索引：

[source,js]
--------------------------------------------------
GET /_segments
--------------------------------------------------
// CONSOLE

响应如下：

[source,js]
--------------------------------------------------
{
  "_shards": ...
  "indices": {
    "test": {
      "shards": {
        "0": [
          {
            "routing": {
              "state": "STARTED",
              "primary": true,
              "node": "zDC_RorJQCao9xf9pg3Fvw"
            },
            "num_committed_segments": 0,
            "num_search_segments": 1,
            "segments": {
              "_0": {
                "generation": 0,
                "num_docs": 1,
                "deleted_docs": 0,
                "size_in_bytes": 3800,
                "memory_in_bytes": 1410,
                "committed": false,
                "search": true,
                "version": "7.0.0",
                "compound": true,
                "attributes": {
                }
              }
            }
          }
        ]
      }
    }
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_shards": \.\.\./"_shards": $body._shards,/]
// TESTRESPONSE[s/"node": "zDC_RorJQCao9xf9pg3Fvw"/"node": $body.$_path/]
// TESTRESPONSE[s/"attributes": \{[^}]*\}/"attributes": $body.$_path/]
// TESTRESPONSE[s/: (\-)?[0-9]+/: $body.$_path/]
// TESTRESPONSE[s/7\.0\.0/$body.$_path/]

_0::         JSON 文档的关键是段的名称。此名称用于生成文件名：在分片目录中以此段名开头的所有文件都属于此段。

generation:: 当需要写新段时增加的生成数。段名称来源自此生成数。

num_docs::   存储在此段中的未删除文档数量。

deleted_docs:: 存储在此段中的已删除文档数。数字大于0是正常情况，当段合并时将回收这些文档所占用的空间。

size_in_bytes:: 段使用的磁盘空间（单位为字节）。

memory_in_bytes:: 段会将部分数据放入内存以便可以更有效地搜索。返回的数字代表用于此目的的内存字节数。如果返回-1则表示 Elasticsearch 无法计算该数字。

committed::  标示段是否已在磁盘上同步。即使重启，已经提交的段也不会丢失。如果提交失败也无需担心，所有未提交段的数据存储在事务日志中，下次启动时 Elasticsearch 会重新提交更改。

search::     段是否可搜索。如果值为 false，则可能意味着该段已写入磁盘，但此后没有进行刷新以使其可被搜索。  

version::    用于写此段的 Lucene 版本号。

compound::   段是否存储在复合文件中。如果为 true，则表示 Lucene 将段中的所有文件合并为一个文件保存。

attributes:: 包含是否启用高压缩等信息。

[float]
=== 详细模式

要添加可用于调试的附加信息，需要使用 `verbose` 标志。

NOTE: 附加详细信息的格式 在Lucene 中被标记为实验性的，将来可能会改变。

[source,js]
--------------------------------------------------
GET /test/_segments?verbose=true
--------------------------------------------------
// CONSOLE

响应：

[source,js]
--------------------------------------------------
{
    ...
        "_0": {
            ...
            "ram_tree": [
                {
                    "description": "postings [PerFieldPostings(format=1)]",
                    "size_in_bytes": 2696,
                    "children": [
                        {
                            "description": "format 'Lucene50_0' ...",
                            "size_in_bytes": 2608,
                            "children" :[ ... ]
                        },
                        ...
                    ]
                },
                ...
                ]

        }
    ...
}
--------------------------------------------------
// NOTCONSOLE
//Response is too verbose to be fully shown in documentation, so we just show the relevant bit and don't test the response.
