[[indices-templates]]
== 索引模板

索引模板允许您在创建新索引时自动应用预定义的模板。模板包括 <<index-modules-settings,settings>> 和 <<mapping,mappings>> 以及通过简单的模式模板匹配来控制是否将模板应用于新索引。

NOTE: 模板仅在索引创建时生效。更改模板不会对现有索引产生影响。使用创建模板 API 时，创建索引时定义的设置/映射将优先于模板中定义的设置/映射。

例如：

[source,js]
--------------------------------------------------
PUT _template/template_1
{
  "index_patterns": ["te*", "bar*"],
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "_doc": {
      "_source": {
        "enabled": false
      },
      "properties": {
        "host_name": {
          "type": "keyword"
        },
        "created_at": {
          "type": "date",
          "format": "EEE MMM dd HH:mm:ss Z YYYY"
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TESTSETUP

NOTE: 索引模板提供 C 样式/ * * /块注释。 除了在开始的花括号之前外，JSON文档中的所有地方都允许注释。 

定义名为 `template_1` 的模板，模板模式为 `te*` 或 `bar*`。模板对应的设置和映射会被应用在与 `te*` 或 `bar*` 模式匹配的任何索引名称上。

也可以在索引模板中包含别名，如下所示：

[source,js]
--------------------------------------------------
PUT _template/template_1
{
    "index_patterns" : ["te*"],
    "settings" : {
        "number_of_shards" : 1
    },
    "aliases" : {
        "alias1" : {},
        "alias2" : {
            "filter" : {
                "term" : {"user" : "kimchy" }
            },
            "routing" : "kimchy"
        },
        "{index}-alias" : {} <1>
    }
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/DELETE _template\/template_1\n/]

<1> 在创建索引时，别名中的 `{index}` 占位符将被替换为模板匹配到的索引实际名称。

[float]
[[delete]]
=== 删除模板

名称唯一标示索引模板（上例中为`template_1`），可以通过名称删除模板：

[source,js]
--------------------------------------------------
DELETE /_template/template_1
--------------------------------------------------
// CONSOLE

[float]
[[getting]]
=== 获取模板

索引模板由名称标识（上例中为`template_1`），可以使用以下方法检索：

[source,js]
--------------------------------------------------
GET /_template/template_1
--------------------------------------------------
// CONSOLE

您还可以使用以下通配符匹配多个模板：

[source,js]
--------------------------------------------------
GET /_template/temp*
GET /_template/template_1,template_2
--------------------------------------------------
// CONSOLE

要获取所有索引模板的列表可以执行：

[source,js]
--------------------------------------------------
GET /_template
--------------------------------------------------
// CONSOLE

[float]
[[indices-templates-exists]]
=== 模板是否存在

可以检查模板是否存在。例如：

[source,js]
-----------------------------------------------
HEAD _template/template_1
-----------------------------------------------
// CONSOLE

可以通过 HTTP 状态代码来判断是否存在给定名称的模板。状态代码 `200` 表示存在，`404` 表示不存在。

[float]
[[multiple-templates]]
=== 多模板匹配

多个索引模板都有可能匹配到某个索引，在这种情况下，设置和映射会被合并到索引的最终配置中。可以使用 `order` 参数指定合并的顺序，首先应用低阶的，然后用高阶的覆盖。例如：

[source,js]
--------------------------------------------------
PUT /_template/template_1
{
    "index_patterns" : ["*"],
    "order" : 0,
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "_doc" : {
            "_source" : { "enabled" : false }
        }
    }
}

PUT /_template/template_2
{
    "index_patterns" : ["te*"],
    "order" : 1,
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "_doc" : {
            "_source" : { "enabled" : true }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[s/^/DELETE _template\/template_1\n/]

上面的命令将不保存 `_source`，但对于以 `te*` 开头的索引，仍然会启用 `_source`。注意，对于映射，合并是“深层次”的，这意味着可以在高阶模板上轻松添加/覆盖特定对象/属性的映射，而低阶模板用来提供基础配置。

[float]
[[versioning-templates]]
=== 模板版本控制

可以为模板添加 `version`，编号可以是任意整数，以便通过外部系统简化模板管理。 `version` 字段是完全可选的，它仅用于模板的外部管理。若要取消 `version`，只需在不指定模板的情况下替换模板。

[source,js]
--------------------------------------------------
PUT /_template/template_1
{
    "index_patterns" : ["*"],
    "order" : 0,
    "settings" : {
        "number_of_shards" : 1
    },
    "version": 123
}
--------------------------------------------------
// CONSOLE

要检查 `version`，您可以通过 `filter_path`  <<common-options-response-filtering,过滤响应>> 来限制响应只返回 `version` 字段：

[source,js]
--------------------------------------------------
GET /_template/template_1?filter_path=*.version
--------------------------------------------------
// CONSOLE
// TEST[continued]

可以看到如下响应内容很少，解析起来既简单成本又低：

[source,js]
--------------------------------------------------
{
  "template_1" : {
    "version" : 123
  }
}
--------------------------------------------------
// TESTRESPONSE
